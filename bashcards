#!/usr/bin/env bash

set -o errexit
set -o nounset
set -eou pipefail

ext="bcrds"

# to_filename takes `/path/to/file.ext`
# and echoes `file`
function to_filename {
  local full_filename=$(basename $1)
  local filename="${full_filename%.*}"

  echo "$filename"

  return 0
}

function run_cards {
  clear

  local cards_name=$1
  eval "declare -A cards="${2#*=}
  local -A updated_cards

  local cards_keys=("${!cards[@]}")
  local cards_keys_count=${#cards_keys[@]}
  local random_cards_key_index="$[$RANDOM % $cards_keys_count]"
  local random_cards_key="${cards_keys[$random_cards_key_index]}"

  local selected_key_val=("$random_cards_key" "${cards[$random_cards_key]}")
  local random_selected_index="$[$RANDOM % 2]"

  local front="${selected_key_val[$random_selected_index]}"
  local front_length=${#front}
  local front_hborder_length=$(( $front_length + 6 ))
  local front_vborder_length=$(( $front_length + 4 ))

  local back="${selected_key_val[$(( $random_selected_index == 0 ? 1 : 0))]}"
  local back_length=${#back}
  local back_hborder_length=$(( $back_length + 6 ))
  local back_vborder_length=$(( $back_length + 4 ))

  # print cards name
  echo "$(to_filename $cards_name)"
  echo ""

  # print front
  printf '–%.0s' $(seq 1 $front_hborder_length)
  echo ""
  printf "|"
  printf ' %.0s' $(seq 1 $front_vborder_length)
  printf "|"
  echo ""

  echo "|  $front  |"

  printf "|"
  printf ' %.0s' $(seq 1 $front_vborder_length)
  printf "|"
  echo ""
  printf '–%.0s' $(seq 1 $front_hborder_length)
  echo ""

  read -p "(Press return to flip)" _

  # print back
  echo ""
  printf '–%.0s' $(seq 1 $back_hborder_length)
  echo ""
  printf "|"
  printf ' %.0s' $(seq 1 $back_vborder_length)
  printf "|"
  echo ""

  echo "|  $back  |"

  printf "|"
  printf ' %.0s' $(seq 1 $back_vborder_length)
  printf "|"
  echo ""
  printf '–%.0s' $(seq 1 $back_hborder_length)
  echo ""

  for key in "${!cards[@]}"; do
    if [ "$key" != "$random_cards_key" ]; then
      updated_cards["$key"]="${cards[$key]}"
    fi
  done

  if [ ! -v updated_cards[@] ]; then
    echo ""
    echo "All done!"
    read -p "(Press return to exit)" _
    exit 0
  else
    read -p "(Press return for next card)" _
  fi

  run_cards $cards_name "$(declare -p updated_cards)"
}

function select_file {
  local msg="$1"
  shift
  local files=("$@")
  local -a opts

  for file in "${files[@]}"; do
    opts+=("$(to_filename $file)")
  done

  clear
  echo "What would you like to practice?"

  # list the files
  for i in "${!opts[@]}"; do
    echo "$((i+1)). ${opts[$i]}"
  done

  # if there's a feedback message,
  # display that (like an error)
  if [ -n "$msg" ]; then
    echo "$msg"
  fi

  # get the input
  read -p "> " opt

  # make sure the option is in
  # the list and then continue
  if [ $opt -gt 0 ] && [ $opt -lt $((${#files[@]} + 1)) ]; then
    local selected_file="${files[$opt-1]}"
    local -A cards

    while IFS=\= read key value; do
      cards["$key"]="$value"
    done < $selected_file

    run_cards $selected_file "$(declare -p cards)"
  else
    select_file "(Please select from the options)" "${files[@]}"
  fi
}

function start {
  local -a files

  for file in $1/*.$ext; do
    files+=("$file")
  done

  select_file "" "${files[@]}"

  return 0
}

function usage {
  cat <<EOF
Usage: bashcards [OPTION...]

  -d, --dir DIRECTORY    Specify directory with *.$ext files
  -h, --help             See this help list
EOF
  return 0
}

function unknown-cmd {
  usage
  return 1
}

[[ $# -lt 1 ]] && unknown-cmd

if [ $# -lt 1 ]; then
  start $PWD
else
  case "$1" in
    -d|--dir ) start $2    ;;
    -h|--help) usage       ;;
            *) unknown-cmd ;;
  esac
fi
