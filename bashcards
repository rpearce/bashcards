#!/usr/bin/env bash

set -o errexit
set -o errtrace
set -o nounset
set -eou pipefail

pname="bashcards"
ext="bcrds"
version="0.1.3"

function version {
  echo "$version"
  return 0
}

function usage {
  cat <<EOF
Usage: $pname [OPTION...]

  -d, --dir DIRECTORY    Directory containing *.$ext files
  -h, --help             See this help information
  -v, --version          Current version
EOF

  return 0
}

function unknown-cmd {
  echo "$pname: Sorry! I'm not sure what to do. Please use a known option."
  echo ""
  usage
  return 1
}

function dir_not_found {
  echo "$pname: Directory not found. Are you sure you typed it correctly?"
  return 1
}

# to_filename transforms `/path/to/file.ext` to `file`
function to_filename {
  local full_filename
  local filename

  full_filename=$(basename "$1")
  filename="${full_filename%.*}"

  echo "$filename"

  return 0
}

# builds the card output; for example:
# ––––––––––––––––
# |              |
# |  Te quiero.  |
# |              |
# ––––––––––––––––
function make_card {
  local hborder_length="$1"
  local vborder_length="$2"
  shift
  shift
  local content="$*"

  echo ""
  printf '–%.0s' $(seq 1 "$hborder_length")
  echo ""
  printf "|"
  printf ' %.0s' $(seq 1 "$vborder_length")
  printf "|"
  echo ""

  echo "|  $content  |"

  printf "|"
  printf ' %.0s' $(seq 1 "$vborder_length")
  printf "|"
  echo ""
  printf '–%.0s' $(seq 1 "$hborder_length")
  echo ""

  return 0
}

function clearscreen {
  printf '\033c'
  return 0
}


function run_cards {
  clearscreen

  local cards_name=$1
  eval "declare -A cards=""${2#*=}"
  local -A updated_cards

  local cards_keys=("${!cards[@]}")
  local cards_keys_count=${#cards_keys[@]}
  local random_cards_key_index="$(( RANDOM % cards_keys_count ))"
  local random_cards_key="${cards_keys[$random_cards_key_index]}"

  local selected_key_val=("$random_cards_key" "${cards[$random_cards_key]}")
  local random_selected_index="$(( RANDOM % 2 ))"

  local front="${selected_key_val[$random_selected_index]}"
  local front_length=${#front}
  local front_hborder_length=$(( front_length + 6 ))
  local front_vborder_length=$(( front_length + 4 ))

  local back="${selected_key_val[$(( random_selected_index == 0 ? 1 : 0))]}"
  local back_length=${#back}
  local back_hborder_length=$(( back_length + 6 ))
  local back_vborder_length=$(( back_length + 4 ))

  # print cards name
  local output_name
  output_name="$(to_filename "$cards_name")"
  echo "$output_name"

  # print front
  local output_front
  output_front="$(make_card $front_hborder_length $front_vborder_length "$front")"
  echo "$output_front"

  read -rp "(Press return to flip)" _

  # print back
  local output_back
  output_back="$(make_card $back_hborder_length $back_vborder_length "$back")"
  echo "$output_back"

  for key in "${!cards[@]}"; do
    if [ "$key" != "$random_cards_key" ]; then
      updated_cards["$key"]="${cards[$key]}"
    fi
  done

  if [[ ! -v updated_cards[@] ]]; then
    echo ""
    echo "All done!"
    read -rp "(Press return to exit)" _
    exit 0
  else
    read -rp "(Press return for next card)" _
  fi

  run_cards "$cards_name" "$(declare -p updated_cards)"

  return 0
}

function select_file {
  local msg="$1"
  shift
  local files=("$@")
  local -a opts

  for file in "${files[@]}"; do
    opts+=("$(to_filename "$file")")
  done

  clearscreen
  echo "What would you like to practice?"

  # list the files
  for i in "${!opts[@]}"; do
    echo "$((i+1)). ${opts[$i]}"
  done

  # if there's a feedback message,
  # display that (like an error)
  if [ -n "$msg" ]; then
    echo "$msg"
  fi

  # get the input
  read -rp "> " opt

  # make sure the option is in
  # the list and then continue
  if
    [[ "$opt" =~ ^[0-9]+$ ]] &&
    [ "$opt" -gt 0 ] &&
    [ "$opt" -lt $((${#files[@]} + 1)) ]
  then
    local selected_file="${files[$opt-1]}"
    local -A cards

    while IFS="=" read -r key value; do
      cards["$key"]="$value"
    done < "$selected_file"

    run_cards "$selected_file" "$(declare -p cards)"
  else
    select_file "(Please select from the options)" "${files[@]}"
  fi

  return 0
}

function start {
  local -a files

  if [ -d "$1" ]; then
    for file in "$1"/*."$ext"; do
      files+=("$file")
    done

    select_file "" "${files[@]}"

    return 0
  else
    dir_not_found
  fi
}

# Check if no command is provided

[[ $# -lt 1 ]] && unknown-cmd

# Determine command

case "$1" in
  -d|--dir    ) [[ -z "${2-}" ]] && dir_not_found; start "$2";;
  -h|--help   ) usage;;
  -v|--version) version;;
             *) unknown-cmd;;
esac
