#!/usr/bin/env bash

set -o errexit
set -o nounset
set -eou pipefail

declare -a groups=(
  "Spanish"
  "Swedish"
  "German"
)

declare -A Spanish=(
  ["Goodbye"]="Adiós"
  ["Hello"]="Hola"
  ["I love you"]="Te quiero"
  ["We are very happy"]="Nos alegra muchísimo"
)

declare -A Swedish=(
  ["Goodbye"]="Adjö"
  ["Hello"]="Hallå"
  ["I love you"]="Jag älskar dig"
  ["We are very happy"]="Vi är väldigt lyckliga"
)

declare -A German=(
  ["Goodbye"]="Auf Wiedersehen"
  ["Hello"]="Hallo"
  ["I love you"]="Ich liebe dich"
  ["We are very happy"]="Wir sind sehr glücklich"
)

function run_cards() {
  clear

  local group_name=$1
  eval "local -A group="${2#*=}
  local -A updated_group

  local group_keys=("${!group[@]}")
  local group_key_count=${#group_keys[@]}
  local random_group_key_index="$[$RANDOM % $group_key_count]"
  local random_group_key="${group_keys[$random_group_key_index]}"

  local selected_key_val=("$random_group_key" "${group[$random_group_key]}")
  local random_selected_index="$[$RANDOM % 2]"
  local random_selected_key_or_val="${selected_key_val[$random_selected_index]}"

  # print group name
  echo "$group_name"
  echo ""

  # print front
  echo $random_selected_key_or_val

  read -p "(Press return to flip)" _

  # print back
  echo ${selected_key_val[@]/$random_selected_key_or_val}

  for key in "${!group[@]}"; do
    if [ "$key" != "$random_group_key" ]; then
      updated_group["$key"]="${group[$key]}"
    fi
  done

  if [ ! -v updated_group[@] ]; then
    echo ""
    echo "All done!"
    read -p "(Press return to exit)" _
    exit 0
  else
    read -p "(Press return for next card)" _
  fi

  run_cards $group_name "$(declare -p updated_group)"
}

function select_group() {
  clear
  echo "What would you like to practice?"

  # list the groups
  for i in "${!groups[@]}"; do
    echo "$((i+1)). ${groups[$i]}"
  done

  # if there's a feedback message,
  # display that (like an error)
  if [ "$*" ]; then
    echo $1
  fi

  # get the input
  read -p "> " opt

  # make sure the option is in
  # the list and then continue
  if [ $opt -gt 0 ] && [ $opt -lt $((${#groups[@]} + 1)) ]; then
    run_cards "${groups[0]}" "$(declare -p ${groups[$opt-1]})"
  else
    select_group "(Please select from the options)"
  fi
}

function start() {
  select_group
}

start
